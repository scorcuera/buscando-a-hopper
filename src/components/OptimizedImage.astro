---
import { Image } from 'astro:assets';

export interface Props {
  src: string;
  alt: string;
  loading?: "lazy" | "eager";
}

const { 
  src, 
  alt, 
  loading = "lazy"
} = Astro.props;

// Determine if this is a hero image based on loading attribute
const isHero = loading === "eager";

// Images load faster with proper dimensions
const width = isHero ? 1920 : 800;
const height = isHero ? 1080 : 600;

// Higher quality for hero, lower for regular images
const quality = isHero ? 85 : 60;
---

<div class="image-wrapper">
  {!src && (
    <div style="padding: 20px; color: red;">Image not found</div>
  )}
  
  {isHero && (
    <link rel="preload" href={src} as="image" />
  )}
  
  {/* Use direct HTML img for hero images to bypass Astro Image processing */}
  {isHero ? (
    <img 
      src={src} 
      alt={alt} 
      width={width} 
      height={height} 
      loading={loading} 
      decoding="sync"
      class="hero-img" 
    />
  ) : (
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      quality={quality}
      format="webp"
      loading={loading}
      decoding="async"
    />
  )}
</div>

<style>
  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: #1a1a1a; /* Dark gray placeholder */
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  :global(.image-wrapper img) {
    max-width: 100%;
    height: auto;
    display: block;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  :global(.image-wrapper img.loaded) {
    opacity: 1;
  }
  
  :global(.hero-section .image-wrapper img) {
    object-fit: cover !important;
    width: 100vw !important;
    height: 100vh !important;
  }
</style>

<script>
  // Find all image wrappers
  document.querySelectorAll('.image-wrapper').forEach(wrapper => {
    const img = wrapper.querySelector('img');
    if (!img) return;
    
    // Set up image loading completion
    const setupImageLoaded = () => {
      img.classList.add('loaded');
      wrapper.dispatchEvent(new CustomEvent('imageLoaded', { bubbles: true }));
    };
    
    // Check if image is already loaded
    if (img.complete) {
      setupImageLoaded();
    } else {
      img.onload = setupImageLoaded;
    }
  });
</script> 