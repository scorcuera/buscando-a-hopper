---
import { getImages } from '../utils/images';
import OptimizedImage from './OptimizedImage.astro';
import SeoTextComponent from './SeoTextComponent.astro';

const allImages = await getImages();

// Separate the hero image
const heroImage = allImages[0];
heroImage.position = 'center';
heroImage.size = 'hero';

// Get the rest of the images (excluding hero)
const enhancedImages = allImages.slice(1);

// Caption texts for each primary image
const captionTexts = [
  "lo busqué en los que esperan",        // img_01 (index 0)
  "y en los que rezan",                   // img_02 (index 1)
  "a última hora, en el mercado",           // img_03 (index 2)
  "y a primera, en exámenes",       // img_04 (index 3)
  "lo busqué en los que llegan puntuales",             // img_05 (index 4)
  "y en los noctámbulos",               // img_06 (index 5)
  "en los restos de fantasmas",     // img_07 (index 6)
  "y en las primeras ideas",   // img_08 (index 7)
  "lo busqué de camino al trabajo",              // img_09 (index 8)
  "y de vuelta a casa",                // img_10 (index 9)
  "en los juegos de pelota",                     // img_11 (index 10)
  "y en los de manos",            // img_12 (index 11)
  "lo busqué en los soñadores",         // img_13 (index 12)
  "y también en sus noches",                   // img_14 (index 13)
  "tal vez en un domingo de otoño",                      // img_15 (index 14)
  "o en uno de invierno",                // img_16 (index 15)
  "me asomé a los portales dimensionales", // img_17 (index 16)
  "y a los liminales",                      // img_18 (index 17)
  "lo busqué en los que se quedaron",                // img_19 (index 18)
  "y en los que se fueron"                           // img_20 (index 19)
];

// NEW: Caption texts for variant images with Hopper painting references
const variantCaptionTexts = {
  "01b": "<i>Office in a Small City</i> (1953)",
  "04b": "<i>New York Movie</i> (1939)",
  "08b": "<i>Cape Cod Morning</i> (1950)",
  "13b": "<i>Compartment C</i> (1938)",
  "16b": "<i>Rooms by the Sea</i> (1951)",
  "19b": "<i>House by the Railroad</i> (1925)"
};

// Set specific size and position for each image
const imageLayout = [
  { size: 'large', position: 'center' },  // img_01
  { size: 'medium', position: 'right' },  // img_02
  { size: 'large', position: 'left' },    // img_03
  { size: 'small', position: 'center' },  // img_04
  { size: 'medium', position: 'left' },   // img_05
  { size: 'large', position: 'right' },  // img_06
  { size: 'medium', position: 'left' }, // img_07
  { size: 'large', position: 'center' },   // img_08
  { size: 'medium', position: 'left' },   // img_09
  { size: 'large', position: 'right' }, // img_10
  { size: 'large', position: 'center' },   // img_11
  { size: 'medium', position: 'left' },    // img_12
  { size: 'medium', position: 'center' }, // img_13
  { size: 'medium', position: 'left' },   // img_14
  { size: 'large', position: 'right' },    // img_15
  { size: 'medium', position: 'center' },   // img_16
  { size: 'medium', position: 'center' },  // img_17
  { size: 'medium', position: 'right' },  // img_18
  { size: 'medium', position: 'center' }, // img_19
  { size: 'small', position: 'left' }    // img_20
];

// Apply layouts to primary images (skip variants as they're always centered)
let primaryImageIndex = 0;
enhancedImages.forEach((image, index) => {
  if (!image.isVariant && primaryImageIndex < imageLayout.length) {
    image.size = imageLayout[primaryImageIndex].size;
    image.position = imageLayout[primaryImageIndex].position;
    primaryImageIndex++;
  }
});
---

<div class="photo-grid">
  {/* Hero Section */}
  <div class="photo-section center hero-section">
    <div class="photo-item hero" data-image-id={0}>
      <div class="hero-overlay" />
      <OptimizedImage
        src={heroImage.src}
        alt={heroImage.alt}
        loading="eager"
      />
      <h1 class="hero-title">buscando a Hopper</h1>
      <div class="scroll-indicator first-indicator">
        <span class="scroll-arrow"></span>
      </div>
    </div>
  </div>

  {/* Text Section */}
  <div class="text-section">
    <div class="text-content">
      <p class="fade-text">Edward Hopper</p>
      <p class="fade-text">un pintor que me enseñó a mirar</p>
      <p class="fade-text">un día salí a pasear</p>
      <p class="fade-text"></p>
      <p class="fade-text">y probé a imitarlo</p>
    </div>
    <div class="scroll-indicator second-indicator">
      <span class="scroll-arrow"></span>
    </div>
  </div>

  {/* Rest of the images */}
  {enhancedImages.map((image, index) => {
    // For variant images, include captions for Hopper paintings
    if (image.isVariant) {
      const variantId = `${image.variantOf}b`;
      const caption = variantCaptionTexts[variantId] || "";
      
      return (
        <div class={`photo-section center variant-section`}>
          <div class={`photo-item variant-item`} data-image-id={variantId}>
            <OptimizedImage
              src={image.src}
              alt={image.alt}
              loading="lazy"
            />
          </div>
          {/* Add caption for variant images */}
          <div class="caption-wrapper center variant-caption">
            <p class="image-caption" set:html={caption} />
          </div>
        </div>
      );
    }
    
    // For primary images, proceed as before
    // Calculate caption index (accounting for variant images that were added)
    const captionIndex = primaryImageIndex = enhancedImages.slice(0, index).filter(img => !img.isVariant).length;
    const caption = captionTexts[captionIndex] || "";
    const isImage06 = image.id === "06"; // Special case for img_06
    
    return (
      <div class={`photo-section ${image.position}`}>
        <div class={`photo-item ${image.size}`} data-image-id={image.id}>
          <OptimizedImage
            src={image.src}
            alt={image.alt}
            loading="lazy"
          />
          {/* Special case for image_06 - caption inside the photo */}
          {isImage06 && (
            <div class="caption-wrapper-overlay">
              <p class="image-caption">{caption}</p>
            </div>
          )}
        </div>
        {/* Regular caption for all other primary images */}
        {!isImage06 && (
          <div class={`caption-wrapper ${image.position}`}>
            <p class="image-caption">{caption}</p>
          </div>
        )}
      </div>
    );
  })}
</div>

<style>
  /* Base Styles */
  .photo-grid {
    display: flex;
    flex-direction: column;
    gap: 25vh;
    padding: 0 0 25vh 0;
  }

  /* Hero Section */
  .hero-section {
    min-height: 100vh !important;
    padding: 0 !important;
    margin: 0 !important;
    width: 100vw !important;
    position: relative !important;
    left: 50% !important;
    transform: translateX(-50%) !important;
    overflow: visible !important;
  }

  .hero-section .photo-item {
    width: 100vw !important;
    height: 100vh !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: hidden !important;
  }

  .hero-section .photo-item img {
    width: 100vw !important;
    height: 100vh !important;
    object-fit: cover !important;
    display: block !important;
    margin: 0 !important;
    padding: 0 !important;
  }

  @media (min-width: 1200px) {
    .hero-section,
    .hero-section .photo-item,
    .hero-section .photo-item img {
      width: 100vw !important;
      left: 50% !important;
      transform: translateX(-50%) !important;
      margin: 0 !important;
      padding: 0 !important;
    }
  }

  .hero-overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.4);
    z-index: 1;
  }

  .hero-title {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -380%);
    font-family: 'Merriweather', serif;
    color: rgb(238, 237, 226);
    font-size: 1.5rem;
    font-weight: 300;
    opacity: 0;
    transition: opacity 3s ease;
    text-align: center;
    z-index: 2;
  }

  /* Photo Section Layout */
  .photo-section {
    position: relative;
    min-height: 70vh;
    display: flex;
    align-items: center;
    padding: 2rem;
  }

  .left { justify-content: flex-start; }
  .center { justify-content: center; }
  .right { justify-content: flex-end; }

  /* Photo Items */
  .photo-item {
    position: relative;
    width: fit-content;
    border-radius: 4px;
    overflow: hidden;
    opacity: 0;
    background-color: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .photo-item:not(.hero) {
    transform: translateY(100px);
  }

  /* Animations */
  .photo-item.visible {
    opacity: 1;
  }

  .hero-title.visible {
    opacity: 1;
  }

  .photo-item.hero.visible {
    transition: opacity 4s ease;
  }

  .photo-item:not(.hero).visible {
    transform: translateY(0);
    transition: opacity 4s ease, transform 1.5s cubic-bezier(0.33, 1, 0.68, 1);
  }

  /* Image Sizes */
  .small {
    width: 40%;
    max-height: 55vh;
  }

  .medium {
    width: 55%;
    max-height: 65vh;
  }

  .large {
    width: 70%;
    max-height: 75vh;
  }

  /* Fix for the specific problem images */
  [data-image-id="12"],
  [data-image-id="13"] {
    background-color: transparent;
  }

  [data-image-id="15"] {
    overflow: visible;
    width: 30%;
    max-height: 45vh;
  }

  [data-image-id="15"] .image-wrapper {
    max-width: 100%;
    max-height: 100%;
  }

  [data-image-id="15"] img {
    max-height: 45vh !important;
    object-fit: contain !important;
  }

  /* Update OptimizedImage component styles */
  :global(.image-wrapper) {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: transparent !important;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  :global(.photo-item:not(.hero) img) {
    object-fit: contain !important;
    width: auto !important;
    max-width: 100% !important;
    max-height: 100% !important;
  }

  /* Responsive Styles */
  @media (max-width: 768px) {
    .photo-grid {
      gap: 6vh;
    }

    .photo-section {
      padding: 0.5rem;
      min-height: auto;
      justify-content: center !important;
    }

    .small, 
    .medium, 
    .large {
      width: calc(100vw - 1rem) !important;
      max-height: none !important;
      margin: 0 auto;
    }

    .left, 
    .right, 
    .center {
      justify-content: center !important;
    }


    .hero-title {
      font-size: 1.2rem !important;
      padding: 0 0 !important;
    }

    .first-indicator {
      bottom: 5rem !important;
    }

    /* Update text section styles */
    .text-section {
      min-height: auto;  /* Remove fixed height */
      padding: 2rem 0.5rem;  /* Reduce padding */
      padding-bottom: 10rem !important;
      gap: 2vh;  /* Reduce gap */
    }

    .fade-text {
      font-size: 1.2rem !important;  /* Make text smaller */
      margin: 0.8em 0;  /* Reduce margins */
    }

    :global(.photo-item:not(.hero) .image-wrapper) {
      width: 100% !important;
    }

    :global(.photo-item:not(.hero) img) {
      width: 100% !important;
      height: auto !important;
      object-fit: contain !important;
    }

    [data-image-id="15"] {
      width: calc(100vw - 1rem) !important;
      max-height: none !important;
    }
  }

  /* Add new text section styles */
  .text-section {
    min-height: 75vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
    position: relative;
    padding: 5rem 5rem;
    gap: 6vh;
  }

  .text-content {
    text-align: center;
    max-width: 800px;
    position: relative;
    padding-bottom: 120px;
  }

  .fade-text {
    font-family: 'Merriweather', serif;
    color: rgb(238, 237, 226);
    font-size: 1.2rem;
    font-weight: 300;
    opacity: 0;
    margin: 1.5em 0;
    line-height: 1.6;
  }

  .fade-text.visible {
    opacity: 1;
    transition: opacity 2s ease;
  }

  /* Scroll indicator styles */
  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 1s ease;
    z-index: 5;
    cursor: pointer;
  }

  .scroll-arrow {
    display: block;
    width: 20px;
    height: 20px;
    border-bottom: 2px solid rgba(238, 237, 226, 0.7);
    border-right: 2px solid rgba(238, 237, 226, 0.7);
    transform: rotate(45deg);
    animation: scroll-bounce 2s infinite;
  }

  @keyframes scroll-bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0) rotate(45deg);
    }
    40% {
      transform: translateY(-10px) rotate(45deg);
    }
    60% {
      transform: translateY(-5px) rotate(45deg);
    }
  }

  .second-indicator {
    position: absolute;
    bottom: 9rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
    opacity: 0;
    margin-top: auto;
  }

  .second-indicator .scroll-arrow {
    width: 15px;
    height: 15px;
    border-bottom: 3px solid rgba(238, 237, 226, 1);
    border-right: 3px solid rgba(238, 237, 226, 1);
  }

  /* Caption Styles */
  .caption-wrapper {
    position: absolute;
    z-index: 2;
    pointer-events: none;
    width: 40%;
  }

  .caption-wrapper.center {
    bottom: 0rem;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    text-align: center;
  }

  .caption-wrapper.right {
    top: 50%;
    transform: translateX(-90%);
    padding-right: 2rem;
  }

  .caption-wrapper.left {
    top: 50%;
    transform: translateX(170%);
    padding-left: 2rem;
  }

  .image-caption {
    font-family: 'Merriweather', serif;
    color: rgb(238, 237, 226);
    font-size: 1rem;
    font-weight: 300;
    line-height: 1.4;
    opacity: 0;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
    margin: 0;
    transition: opacity 1.2s ease;
  }

  .image-caption.visible {
    opacity: 0.9;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .caption-wrapper,
    .caption-wrapper-overlay {
      position: relative !important;
      bottom: auto !important;
      left: auto !important;
      right: auto !important;
      top: auto !important;
      width: 100% !important;
      text-align: center !important;
      margin-top: 0.5rem !important;
      padding: 0 0.5rem !important;
      transform: none !important;
      display: block !important;
      opacity: 0;
      transition: opacity 1s ease;
    }
    
    .caption-wrapper.visible,
    .caption-wrapper-overlay.visible {
      opacity: 1;
    }
    
    /* Ensure photos take full width */
    .photo-item {
      width: 100vw !important;
      max-width: 100vw !important;
      margin: 0 auto !important;
      padding: 0 !important;
      display: flex !important;
      flex-direction: column !important;
    }
    
    /* Fix spacing between photo sections */
    .photo-section {
      display: flex !important;
      flex-direction: column !important;
      align-items: center !important;
      margin-bottom: 8rem !important;
    }
    
    /* Special fix for image 6 */
    [data-image-id="6"] .caption-wrapper-overlay {
      position: relative !important;
      bottom: auto !important;
      left: auto !important;
      margin-top: 0.5rem !important;
      background-color: transparent !important;
    }
  }

  /* Add this to your style section */
  .caption-wrapper-overlay {
    position: absolute;
    bottom: 1.5rem;
    left: 1.5rem;
    z-index: 5;
    pointer-events: none;
    text-align: left;
  }

  .caption-wrapper-overlay .image-caption {
    font-family: 'Merriweather', serif;
    color: rgb(238, 237, 226);
    font-size: 1rem;
    font-weight: 300;
    line-height: 1.4;
    opacity: 0;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.7);
    margin: 0;
    transition: opacity 1.2s ease;
    background-color: rgba(0, 0, 0, 0.4);
    padding: 0.5rem 0.8rem;
    border-radius: 2px;
  }

  .caption-wrapper-overlay .image-caption.visible {
    opacity: 0.95;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    /* Only apply these overrides on mobile */
    [data-image-id="6"] .caption-wrapper-overlay {
      position: relative !important;
      bottom: auto !important;
      left: auto !important;
      right: auto !important;
      top: auto !important;
      width: 100% !important;
      text-align: center !important;
      margin-top: 0.5rem !important;
      padding: 0 0.5rem !important;
      transform: none !important;
      display: block !important;
      opacity: 0;
      transition: opacity 1s ease;
      background-color: transparent !important;
    }
    
    [data-image-id="6"] .caption-wrapper-overlay.visible {
      opacity: 1;
    }
    
    [data-image-id="6"] .caption-wrapper-overlay .image-caption {
      width: 100% !important;
      text-align: center !important;
      background-color: transparent !important;
      padding: 0 !important;
    }
  }

  /* Add this to your existing styles */
  .scroll-indicator:hover {
    opacity: 0.8;
  }

  /* Add styles for variant images */
  .variant-section {
    margin: 10vh 0;
  }
  
  .variant-item {
    width: 50%;
    margin: 0 auto;
  }
  
  /* Special styling just for img_13b */
  [data-image-id="13b"] {
    max-height: 90vh; /* Reduce height for desktop */
  }

  [data-image-id="13b"] img {
    object-fit: contain;
    max-height: 100%;
  }

  @media (max-width: 768px) {
    .variant-item {
      width: 100vw !important;
      max-width: 100vw !important;
      margin: 0 auto !important;
    }
    
    /* Mobile-specific height reduction for img_13b */
    [data-image-id="13b"] {
      max-height: 60vh !important; /* Even shorter on mobile */
    }
    
    [data-image-id="13b"] img {
      object-fit: contain;
      max-height: 60vh !important;
    }
  }

  /* Add variant caption styling */
  .variant-caption {
    margin-top: 1rem;
    width: 50%;  /* Match the width of variant images */
  }
  
  .variant-caption .image-caption {
    font-size: 0.9rem;
    opacity: 0.75;
    text-align: center;
  }
  
  @media (max-width: 768px) {
    .variant-caption {
      width: 100% !important;
      padding: 0 1rem;
    }
  }
</style>

<script>
  // Combined setup function to avoid duplicate initialization
  function setupPage() {
    setupAnimations();
    setupTextAnimations();
    setupScrollIndicators();
    setupArrowClicks();
  }

  function setupAnimations() {
    const items = Array.from(document.querySelectorAll('.photo-item'));
    
    const handleIntersection = (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Get the photo section that contains this photo item
          const photoSection = entry.target.closest('.photo-section');
          const isImage06 = entry.target.dataset.imageId === "6"; // Check if it's image_06
          
          // First make the photo visible
          setTimeout(() => {
            entry.target.classList.add('visible');
            
            // Then animate the caption after a delay
            if (isImage06) {
              // For image_06, find caption inside the photo-item
              const caption = entry.target.querySelector('.image-caption');
              const captionWrapper = entry.target.querySelector('.caption-wrapper-overlay');
              
              if (caption) {
                setTimeout(() => {
                  caption.classList.add('visible');
                  if (captionWrapper) captionWrapper.classList.add('visible');
                }, 950);
              }
            } else if (photoSection) {
              // For other images, find caption in the photo section
              const captionWrapper = photoSection.querySelector('.caption-wrapper, .caption-wrapper-overlay');
              const caption = photoSection.querySelector('.caption-wrapper .image-caption, .caption-wrapper-overlay .image-caption');
              
              if (caption) {
                setTimeout(() => {
                  caption.classList.add('visible');
                  if (captionWrapper) captionWrapper.classList.add('visible');
                }, 1100);
              }
            }
          }, 100);
          
          observer.unobserve(entry.target);
        }
      });
    };

    const observer = new IntersectionObserver(handleIntersection, {
      rootMargin: '200px',
      threshold: 0.01
    });

    items.forEach((item) => {
      const imageWrapper = item.querySelector('.image-wrapper');
      const isHero = item.closest('.hero-section') !== null;
      const heroTitle = item.querySelector('.hero-title');
      
      if (!imageWrapper) return;

      if (!isHero) {
        observer.observe(item);
      }

      imageWrapper.addEventListener('imageLoaded', () => {
        if (isHero) {
          item.classList.add('visible');
          setTimeout(() => {
            heroTitle?.classList.add('visible');
          }, 1000);
        }
      });
    });

    // Preload first few non-hero images
    const preloadImages = Array.from(document.querySelectorAll('.photo-item:not(.hero)')).slice(0, 3);
    preloadImages.forEach(item => {
      const img = item.querySelector('img');
      if (img) {
        img.loading = 'eager';
      }
    });
  }

  // Fix the scroll indicator timing issue
  function setupTextAnimations() {
    const textSection = document.querySelector('.text-section');
    const texts = textSection?.querySelectorAll('.fade-text');
    const secondIndicator = document.querySelector('.second-indicator');
    
    if (!texts || !secondIndicator) return;

    let hasStartedAnimation = false;

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && !hasStartedAnimation) {
          hasStartedAnimation = true;
          
          // Start text animations
          texts.forEach((text, index) => {
            const delay = index === texts.length - 1 ? 750 : 1000;
            setTimeout(() => {
              text.classList.add('visible');
              
              // Only show the indicator after the last text has appeared
              if (index === texts.length - 1) {
                setTimeout(() => {
                  secondIndicator.style.opacity = '1';
                }, 1300);
              }
            }, index * delay);
          });
          
          observer.unobserve(entries[0].target);
        }
      },
      {
        threshold: 0.2
      }
    );

    observer.observe(textSection);
  }

  function setupScrollIndicators() {
    const firstIndicator = document.querySelector('.first-indicator');
    const heroSection = document.querySelector('.hero-section');
    
    if (!firstIndicator || !heroSection) return;
    
    // Show first indicator after a delay regardless of hero image load status
    setTimeout(() => {
      firstIndicator.style.opacity = '1';
    }, 3000);
    
    // Also force the hero to be visible after a timeout
    const heroItem = heroSection.querySelector('.photo-item');
    if (heroItem) {
      setTimeout(() => {
        heroItem.classList.add('visible');
        const heroTitle = heroItem.querySelector('.hero-title');
        if (heroTitle) {
          setTimeout(() => {
            heroTitle.classList.add('visible');
          }, 1000);
        }
      }, 1000);
    }
  }

  // Add this new function to handle arrow clicks with a slower animation
  function setupArrowClicks() {
    // Select all scroll indicators
    const scrollIndicators = document.querySelectorAll('.scroll-indicator');
    
    scrollIndicators.forEach(indicator => {
      indicator.addEventListener('click', () => {
        // Handle differently based on which indicator was clicked
        if (indicator.classList.contains('first-indicator')) {
          // First indicator - scroll to text section
          const textSection = document.querySelector('.text-section');
          if (textSection) {
            smoothScrollTo(textSection, 1800); // Slower animation (1800ms)
          }
        } else if (indicator.classList.contains('second-indicator')) {
          // Second indicator - directly find the first photo section after the text section
          const textSection = document.querySelector('.text-section');
          if (textSection) {
            const nextSection = textSection.nextElementSibling;
            if (nextSection) {
              smoothScrollTo(nextSection, 1800); // Slower animation (1800ms)
            }
          }
        } else {
          // Any other indicators - find parent section and go to next
          const currentSection = indicator.closest('.photo-section');
          if (currentSection) {
            const nextSection = currentSection.nextElementSibling;
            if (nextSection) {
              smoothScrollTo(nextSection, 1800); // Slower animation (1800ms)
            }
          }
        }
      });
    });
    
    // Custom smooth scroll function with adjustable duration
    function smoothScrollTo(element, duration) {
      if (!element) return;
      
      const targetPosition = element.getBoundingClientRect().top + window.pageYOffset;
      const startPosition = window.pageYOffset;
      const distance = targetPosition - startPosition;
      let startTime = null;
      
      function animation(currentTime) {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const progress = Math.min(timeElapsed / duration, 1);
        const ease = easeInOutCubic(progress);
        
        window.scrollTo(0, startPosition + distance * ease);
        
        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        }
      }
      
      // Smooth easing function for natural feel
      function easeInOutCubic(t) {
        return t < 0.5 
          ? 4 * t * t * t 
          : 1 - Math.pow(-2 * t + 2, 3) / 2;
      }
      
      requestAnimationFrame(animation);
    }
  }

  // Single event listener to initialize everything
  document.addEventListener('DOMContentLoaded', setupPage);
</script>

<style is:global>
  /* Remove lightbox-related CSS entirely */
</style> 