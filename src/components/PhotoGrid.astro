---
import { getImages } from '../utils/images';
import OptimizedImage from './OptimizedImage.astro';

const enhancedImages = await getImages();

// First image is still the hero
enhancedImages[0].position = 'center';
enhancedImages[0].size = 'hero';

// Set specific size and position for each remaining image
const imageLayout = [
  { size: 'large', position: 'center' },  // img_01
  { size: 'medium', position: 'right' },  // img_02
  { size: 'large', position: 'left' },    // img_03
  { size: 'small', position: 'center' },  // img_04
  { size: 'medium', position: 'left' },   // img_05
  { size: 'large', position: 'center' },  // img_06
  { size: 'medium', position: 'center' }, // img_07
  { size: 'large', position: 'right' },   // img_08
  { size: 'medium', position: 'left' },   // img_09
  { size: 'medium', position: 'center' }, // img_10
  { size: 'small', position: 'right' },   // img_11
  { size: 'small', position: 'left' },    // img_12
  { size: 'medium', position: 'center' }, // img_13
  { size: 'small', position: 'right' },   // img_14
  { size: 'large', position: 'left' },    // img_15
  { size: 'small', position: 'right' },   // img_16
  { size: 'small', position: 'center' },  // img_17
  { size: 'medium', position: 'right' },  // img_18
  { size: 'medium', position: 'center' }, // img_19
  { size: 'small', position: 'left' }    // img_20
];

// Apply the layout to each image after the hero
enhancedImages.slice(1).forEach((image, index) => {
  if (index < imageLayout.length) {
    image.size = imageLayout[index].size;
    image.position = imageLayout[index].position;
  }
});
---

<div class="photo-grid">
  {/* Hero Section */}
  <div class="photo-section center hero-section">
    <div class="photo-item hero" data-image-id={0}>
      <div class="hero-overlay" />
      <OptimizedImage
        src={enhancedImages[0].src}
        alt={enhancedImages[0].alt}
        loading="eager"
      />
      <h1 class="hero-title">buscando a Hopper</h1>
      <div class="scroll-indicator first-indicator">
        <span class="scroll-arrow"></span>
      </div>
    </div>
  </div>

  {/* Text Section */}
  <div class="text-section">
    <div class="text-content">
      <p class="fade-text">mi gran inspiración en la fotografía ha sido un pintor</p>
      <p class="fade-text">Edward Hopper</p>
      <p class="fade-text">así que un día salí a pasear</p>
      <p class="fade-text"></p>
      <p class="fade-text">e intenté copiar su mirada</p>
    </div>
    <div class="scroll-indicator second-indicator">
      <span class="scroll-arrow"></span>
    </div>
  </div>

  {/* Rest of the images */}
  {enhancedImages.slice(1).map((image, index) => (
    <div class={`photo-section ${image.position}`}>
      <div class={`photo-item ${image.size}`} data-image-id={index + 1}>
        <OptimizedImage
          src={image.src}
          alt={image.alt}
          loading="lazy"
        />
      </div>
    </div>
  ))}
</div>

<style>
  /* Base Styles */
  .photo-grid {
    display: flex;
    flex-direction: column;
    gap: 25vh;
    padding: 0 0 25vh 0;
  }

  /* Hero Section */
  .hero-section {
    min-height: 100vh !important;
    padding: 0 !important;
    margin: 0 !important;
    width: 100vw !important;
    position: relative !important;
    left: 50% !important;
    transform: translateX(-50%) !important;
    overflow: visible !important;
  }

  .hero-section .photo-item {
    width: 100vw !important;
    height: 100vh !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: hidden !important;
  }

  .hero-section .photo-item img {
    width: 100vw !important;
    height: 100vh !important;
    object-fit: cover !important;
    display: block !important;
    margin: 0 !important;
    padding: 0 !important;
  }

  @media (min-width: 1200px) {
    .hero-section,
    .hero-section .photo-item,
    .hero-section .photo-item img {
      width: 100vw !important;
      left: 50% !important;
      transform: translateX(-50%) !important;
      margin: 0 !important;
      padding: 0 !important;
    }
  }

  .hero-overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.4);
    z-index: 1;
  }

  .hero-title {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -380%);
    font-family: 'Merriweather', serif;
    color: rgb(238, 237, 226);
    font-size: 1.5rem;
    font-weight: 300;
    opacity: 0;
    transition: opacity 3s ease;
    text-align: center;
    z-index: 2;
  }

  /* Photo Section Layout */
  .photo-section {
    min-height: 70vh;
    display: flex;
    align-items: center;
    padding: 2rem;
  }

  .left { justify-content: flex-start; }
  .center { justify-content: center; }
  .right { justify-content: flex-end; }

  /* Photo Items */
  .photo-item {
    position: relative;
    width: fit-content;
    border-radius: 4px;
    overflow: hidden;
    opacity: 0;
    background-color: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .photo-item:not(.hero) {
    transform: translateY(100px);
  }

  /* Animations */
  .photo-item.visible {
    opacity: 1;
  }

  .hero-title.visible {
    opacity: 1;
  }

  .photo-item.hero.visible {
    transition: opacity 4s ease;
  }

  .photo-item:not(.hero).visible {
    transform: translateY(0);
    transition: opacity 2s ease, transform 1.5s cubic-bezier(0.33, 1, 0.68, 1);
  }

  /* Image Sizes */
  .small {
    width: 40%;
    max-height: 55vh;
  }

  .medium {
    width: 55%;
    max-height: 65vh;
  }

  .large {
    width: 70%;
    max-height: 75vh;
  }

  /* Fix for the specific problem images */
  [data-image-id="12"],
  [data-image-id="13"] {
    background-color: transparent;
  }

  [data-image-id="16"] {
    overflow: visible;
    width: 30%;
    max-height: 45vh;
  }

  [data-image-id="16"] .image-wrapper {
    max-width: 100%;
    max-height: 100%;
  }

  [data-image-id="16"] img {
    max-height: 45vh !important;
    object-fit: contain !important;
  }

  /* Update OptimizedImage component styles */
  :global(.image-wrapper) {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: transparent !important;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  :global(.photo-item:not(.hero) img) {
    object-fit: contain !important;
    width: auto !important;
    max-width: 100% !important;
    max-height: 100% !important;
  }

  /* Responsive Styles */
  @media (max-width: 768px) {
    .photo-grid {
      gap: 20vh;
      padding: 20vh 0;
    }

    .photo-section {
      padding: 1rem;
      min-height: 60vh;
    }

    .small, .medium, .large {
      width: 85%;
      max-height: 70vh;
    }

    .hero-title {
      font-size: 2.5rem;
      padding: 0 1rem;
    }
  }

  /* Add new text section styles */
  .text-section {
    min-height: 75vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
    position: relative;
    padding-bottom: 5rem;
  }

  .text-content {
    text-align: center;
    max-width: 800px;
    position: relative;
    padding-bottom: 120px;
  }

  .fade-text {
    font-family: 'Merriweather', serif;
    color: rgb(238, 237, 226);
    font-size: 1.2rem;
    font-weight: 150;
    opacity: 0;
    margin: 1.5em 0;
    line-height: 1.6;
  }

  .fade-text.visible {
    opacity: 1;
    transition: opacity 2s ease;
  }

  @media (max-width: 768px) {
    .fade-text {
      font-size: 1.2rem;
      margin: 1em 0;
    }
  }

  /* Scroll indicator styles */
  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 1s ease;
    z-index: 5;
  }

  .scroll-arrow {
    display: block;
    width: 20px;
    height: 20px;
    border-bottom: 2px solid rgba(238, 237, 226, 0.7);
    border-right: 2px solid rgba(238, 237, 226, 0.7);
    transform: rotate(45deg);
    animation: scroll-bounce 2s infinite;
  }

  @keyframes scroll-bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0) rotate(45deg);
    }
    40% {
      transform: translateY(-10px) rotate(45deg);
    }
    60% {
      transform: translateY(-5px) rotate(45deg);
    }
  }

  .second-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
    opacity: 0;
    margin-top: auto;
  }

  .second-indicator .scroll-arrow {
    width: 15px;
    height: 15px;
    border-bottom: 3px solid rgba(238, 237, 226, 1);
    border-right: 3px solid rgba(238, 237, 226, 1);
  }

  @media (max-width: 768px) {
    .scroll-indicator {
      bottom: 1.5rem;
    }
    
    .second-indicator {
      bottom: 1.5rem;
    }
  }
</style>

<script>
  function setupAnimations() {
    const items = Array.from(document.querySelectorAll('.photo-item'));
    
    const handleIntersection = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add('visible');
          }, 100);
          observer.unobserve(entry.target);
        }
      });
    };

    const observer = new IntersectionObserver(handleIntersection, {
      rootMargin: '50px',
      threshold: 0.1
    });

    items.forEach((item) => {
      const imageWrapper = item.querySelector('.image-wrapper');
      const isHero = item.closest('.hero-section') !== null;
      const heroTitle = item.querySelector('.hero-title');
      
      if (!imageWrapper) return;

      imageWrapper.addEventListener('imageLoaded', () => {
        if (isHero) {
          item.classList.add('visible');
          setTimeout(() => {
            heroTitle?.classList.add('visible');
          }, 1400);
        } else {
          observer.observe(item);
        }
      });
    });
  }

  document.addEventListener('DOMContentLoaded', setupAnimations);

  const photos = document.querySelectorAll('.photo-item');
  let currentIndex = 0;

  function showLightbox(index) {
    const img = photos[index].querySelector('img');
    if (!img) return;

    const lightbox = document.createElement('div');
    lightbox.className = 'lightbox';
    
    lightbox.innerHTML = `
      <button class="nav-button prev" aria-label="Previous image">&lt;</button>
      <div class="lightbox-content">
        <img src="${img.src}" alt="${img.alt}">
        <button class="close-button" aria-label="Close lightbox">&times;</button>
      </div>
      <button class="nav-button next" aria-label="Next image">&gt;</button>
    `;

    document.body.appendChild(lightbox);
    setupLightboxListeners(lightbox, index);
  }

  function setupLightboxListeners(lightbox, index) {
    const handleKeyboard = (e) => {
      switch(e.key) {
        case 'Escape': lightbox.remove(); break;
        case 'ArrowLeft': navigateImage(index - 1); break;
        case 'ArrowRight': navigateImage(index + 1); break;
      }
    };

    const navigateImage = (newIndex) => {
      if (newIndex >= 0 && newIndex < photos.length) {
        lightbox.remove();
        showLightbox(newIndex);
      }
    };

    document.addEventListener('keydown', handleKeyboard);
    lightbox.querySelector('.prev')?.addEventListener('click', () => navigateImage(index - 1));
    lightbox.querySelector('.next')?.addEventListener('click', () => navigateImage(index + 1));
    lightbox.querySelector('.close-button')?.addEventListener('click', () => lightbox.remove());
    
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) lightbox.remove();
    });
  }

  photos.forEach((photo, index) => {
    photo.addEventListener('click', () => showLightbox(index));
  });

  // Fix the scroll indicator timing issue
  function setupTextAnimations() {
    const textSection = document.querySelector('.text-section');
    const texts = textSection?.querySelectorAll('.fade-text');
    const secondIndicator = document.querySelector('.second-indicator');
    
    if (!texts || !secondIndicator) return;

    let hasStartedAnimation = false;

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && !hasStartedAnimation) {
          hasStartedAnimation = true;
          
          // Start text animations
          texts.forEach((text, index) => {
            const delay = index === texts.length - 1 ? 750 : 1000;
            setTimeout(() => {
              text.classList.add('visible');
              
              // Only show the indicator after the last text has appeared
              if (index === texts.length - 1) {
                setTimeout(() => {
                  secondIndicator.style.opacity = '1';
                }, 1500); // 2 seconds after last text appears
              }
            }, index * delay);
          });
          
          observer.unobserve(entries[0].target);
        }
      },
      {
        threshold: 0.2
      }
    );

    observer.observe(textSection);
  }

  // Remove or modify setupScrollIndicators to only handle the first indicator
  function setupScrollIndicators() {
    const firstIndicator = document.querySelector('.first-indicator');
    const heroSection = document.querySelector('.hero-section');
    
    if (!firstIndicator || !heroSection) return;
    
    // Show first indicator after hero loads
    setTimeout(() => {
      firstIndicator.style.opacity = '1';
    }, 2500);
    
    // Second indicator is now handled in setupTextAnimations
  }

  document.addEventListener('DOMContentLoaded', () => {
    setupAnimations();
    setupTextAnimations();
    setupScrollIndicators();
  });
</script>

<style is:global>
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .lightbox-content {
    position: relative;
    max-width: 90%;
    max-height: 90vh;
  }

  .lightbox-content img {
    max-height: 90vh;
    object-fit: contain;
  }

  .close-button,
  .nav-button {
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    padding: 1rem;
    opacity: 0.7;
    transition: opacity 0.2s;
  }

  .close-button:hover,
  .nav-button:hover {
    opacity: 1;
  }

  .close-button {
    position: absolute;
    top: -40px;
    right: -40px;
  }

  .nav-button {
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
  }

  .prev { left: 2rem; }
  .next { right: 2rem; }

  @media (max-width: 768px) {
    .nav-button {
      font-size: 1.5rem;
    }
    .prev { left: 0.5rem; }
    .next { right: 0.5rem; }
    .close-button {
      top: -30px;
      right: -10px;
    }
  }
</style> 